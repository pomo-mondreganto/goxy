// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package MonGol

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MonGolClient is the client API for MonGol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonGolClient interface {
	AddPacket(ctx context.Context, in *AddPacketRequest, opts ...grpc.CallOption) (*AddPacketResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	RegisterFilters(ctx context.Context, in *RegisterFiltersRequest, opts ...grpc.CallOption) (*RegisterFiltersResponse, error)
}

type monGolClient struct {
	cc grpc.ClientConnInterface
}

func NewMonGolClient(cc grpc.ClientConnInterface) MonGolClient {
	return &monGolClient{cc}
}

func (c *monGolClient) AddPacket(ctx context.Context, in *AddPacketRequest, opts ...grpc.CallOption) (*AddPacketResponse, error) {
	out := new(AddPacketResponse)
	err := c.cc.Invoke(ctx, "/mongol.MonGol/AddPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monGolClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/mongol.MonGol/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monGolClient) RegisterFilters(ctx context.Context, in *RegisterFiltersRequest, opts ...grpc.CallOption) (*RegisterFiltersResponse, error) {
	out := new(RegisterFiltersResponse)
	err := c.cc.Invoke(ctx, "/mongol.MonGol/RegisterFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonGolServer is the server API for MonGol service.
// All implementations must embed UnimplementedMonGolServer
// for forward compatibility
type MonGolServer interface {
	AddPacket(context.Context, *AddPacketRequest) (*AddPacketResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	RegisterFilters(context.Context, *RegisterFiltersRequest) (*RegisterFiltersResponse, error)
	mustEmbedUnimplementedMonGolServer()
}

// UnimplementedMonGolServer must be embedded to have forward compatible implementations.
type UnimplementedMonGolServer struct {
}

func (UnimplementedMonGolServer) AddPacket(context.Context, *AddPacketRequest) (*AddPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPacket not implemented")
}
func (UnimplementedMonGolServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMonGolServer) RegisterFilters(context.Context, *RegisterFiltersRequest) (*RegisterFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFilters not implemented")
}
func (UnimplementedMonGolServer) mustEmbedUnimplementedMonGolServer() {}

// UnsafeMonGolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonGolServer will
// result in compilation errors.
type UnsafeMonGolServer interface {
	mustEmbedUnimplementedMonGolServer()
}

func RegisterMonGolServer(s grpc.ServiceRegistrar, srv MonGolServer) {
	s.RegisterService(&_MonGol_serviceDesc, srv)
}

func _MonGol_AddPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonGolServer).AddPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongol.MonGol/AddPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonGolServer).AddPacket(ctx, req.(*AddPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonGol_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonGolServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongol.MonGol/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonGolServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonGol_RegisterFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonGolServer).RegisterFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongol.MonGol/RegisterFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonGolServer).RegisterFilters(ctx, req.(*RegisterFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonGol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mongol.MonGol",
	HandlerType: (*MonGolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPacket",
			Handler:    _MonGol_AddPacket_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _MonGol_GetConfig_Handler,
		},
		{
			MethodName: "RegisterFilters",
			Handler:    _MonGol_RegisterFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongol.proto",
}
